package tp.pr4.instructions;

import tp.pr4.NavigationModule;
import tp.pr4.RobotEngine;
import tp.pr4.instructions.exceptions.InstructionExecutionException;
import tp.pr4.instructions.exceptions.WrongInstructionFormatException;
import tp.pr4.items.ItemContainer;
/**
 * @author Carmen Acosta Morales y Nerea Ramirez Lamela 
 * Its execution request the robot to finish the simulation 
 * This Instruction works if the user writes QUIT or SALIR
 *
 */
public class QuitInstruction implements Instruction{
	private RobotEngine robot;
	
	public QuitInstruction (){
		this.robot = new RobotEngine();
	}

	/**
	 * Set the execution context. The method receives the entire engine (engine, navigation and the robot container)
	 *  even though the actual implementation of execute() may not require it.
	 * @param engine
	 * @param navigation
	 * @param robotContainer
	 */
	public void configureContext(RobotEngine engine,
			NavigationModule navigation, ItemContainer robotContainer) {
		// TODO Auto-generated method stub
		this.robot = engine;
		
	}

	
	public void execute() 
			throws InstructionExecutionException {
		// TODO Auto-generated method stub
		System.out.println ("WALLÂ·E says: I have communication problems. Bye bye" );
		this.robot.requestQuit();
		
	}


	public String getHelp() {
		// TODO Auto-generated method stub
		return "QUIT|SALIR";
	}

	@Override
	public Instruction parse(String cad) 
			throws WrongInstructionFormatException {
		// TODO Auto-generated method stub
		String [] cadena = cad.split(" ");
		
		if ( !cadena[0].equalsIgnoreCase("QUIT") && !cadena[0].equalsIgnoreCase("SALIR")
				|| cadena.length != 1){
			throw new WrongInstructionFormatException ();
		}
		else{
			return this;
		}
	}

	@Override
	public void executeVista() throws InstructionExecutionException {
		// TODO Auto-generated method stub
		this.robot.requestQuit();
	}

}
