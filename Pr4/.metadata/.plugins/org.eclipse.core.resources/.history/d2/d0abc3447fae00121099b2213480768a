package tp.pr4.items;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

import tp.pr4.NavigationModule;
import tp.pr4.RobotEngine;
/**
 * @author Carmen Acosta Morales y Nerea Ramirez Lamela 
 * The superclass of every type of item.
 *  It contains the common information for all the items and it
 *   defines the interface that the items must match
 *
 */
public abstract class Item {
	protected String id;
	protected java.lang.String description;
	protected int times;
	
	/**
	 * Item constructor
	 * @param id identification of the item
	 * @param description of the item
	 */
	public Item(java.lang.String id, java.lang.String description){
		
		this.id=id;
		this.description= description;
		this.times = 0;
	}
	/**
	 * Try to use the item with a robot in a given place. 
	 * It returns whether the action was completed. 
	 * Subclasses must override this method
	 * @param r the robot
	 * @param nav the navigation module
	 * @return if it is use
	 */
	
	public abstract boolean use(RobotEngine r, NavigationModule nav);
	/**
	 * Checks if the item can be used. Subclasses must override this method
	 * returns: Checks if the item can be used. Subclasses must override this method
	 */
	public abstract boolean canBeUsed();
	/**
	 * Return the item identifier
	 * @return: The item identifier
	 */
    public java.lang.String getId(){  	
    	
    	return this.id;
    }
    /**
     * Generates a String with the Item description
     */
    public java.lang.String toString(){
    	return this.description;
    }
    
    /**
     * Devuelve true si el elemento es menor cronologicamente al dado
     * @param iden elemento dado
     * @return si es menor
     */
    public boolean menor ( String iden){
    	return this.id.compareToIgnoreCase(iden) < 0;
    }
    /**
     * Revuelve true si el identificador es igual al identificador dado
     * @param iden identificador dado
     * @return si son iguales
     */
    public boolean equal ( String iden){
    	return this.id.compareToIgnoreCase(iden) == 0;
    
    }

	/**
	* Devuelve el numero de veces que se puede usar este item
	*/
	public int getTimes() {
		return times;
	}

	/**
	* Modifica el numero de veces que se puede usar el item
	*/
	public void setTimes(int times) {
		this.times = times;
	}
	
	@Override 
    public int hashCode() {
        final int prime = 31;
        int result = 1;
      //  result = prime * result + id;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        //result = prime * result + ((surname == null) ? 0 : surname.hashCode());
        return result;
    }
	@Override 
	public boolean equals (Object id){
		if(id.getClass() == String.class){
			return this.id.compareToIgnoreCase((String) id) == 0;
		}
		else if(id.getClass().isInstance(Item.class)){
			return this.id.compareToIgnoreCase(((Item)id).id) == 0;
		}
		else{
			//nunca pasa por aqui
		}
		return false;
		/*final String aux = (String) id;
		return this.id.compareToIgnoreCase(aux) == 0;*/
	/*	if ( id == this.id) return true;
		//if (id == null) return false;
		//if (this.id.getClass() != id.getClass()) return false;
	//	final String aux = id.hashCode();
	/*	if ( this.id.hashCode() == id.hashCode()){
			return true;
		} else{
			return false;
		}*/
		
	}

}
