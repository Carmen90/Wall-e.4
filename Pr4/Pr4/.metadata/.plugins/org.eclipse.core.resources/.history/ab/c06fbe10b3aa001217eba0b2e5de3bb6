package tp.pr4;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import tp.pr4.cityLoader.CityLoaderFromTxtFile;
import tp.pr4.gui.Controlador;
import tp.pr4.gui.MainWindow;
import tp.pr4.items.CodeCard;
import tp.pr4.items.Fuel;
import tp.pr4.items.Garbage;

/**
 * Aplicación que utiliza las clases de la práctica sobre el mapa que aparece
 * como ejemplo en el enunciado.
 * 
 * @author PuriArenas
 * @y.exclude
 */
public class Main {
	
	/**
	 * Creates the places and configure the initial current place.
	 * 
	 * @return The place where the robot starts the game
	 */
	@SuppressWarnings("unused")
	private static Place[] createPlaces() {
		String LINE_SEPARATOR = System.getProperty( "line.separator" );
		Place[] _places = new Place[10];
		// 0: Puerta del Sol
		_places[0] = new Place(
				"PUERTA DEL SOL",
				false,
				"You are at the PUERTA DEL SOL, the center of Madrid. "
						+ LINE_SEPARATOR
						+ "Ufff, there are a lot of streets, but all of them are full of garbage."
						+ LINE_SEPARATOR
						+ "You should walk around this place to look for some interesting"
						+ LINE_SEPARATOR
						+ "objects to pick up."
						+ LINE_SEPARATOR
						+ "Note that there is a big clock. Remember, leave the square before "
						+ LINE_SEPARATOR
						+ "night. It can be dangerous");
		// 1: Plaza Mayor
		_places[1] = new Place("PLAZA MAYOR", false,
				"Mmmh... it smells squid fried in butter. You should try to eat something");

		// 2: Plaza España
		_places[2] = new Place(
				"PLAZA ESPAÑA",
				false,
				"What a big square! You have a big park where you can sleep under a tree."
						+ LINE_SEPARATOR
						+ "But you have a problem, you have to come back to PLAZA MAYOR. "
						+ LINE_SEPARATOR + "There is no other exit");

		// 3: Plaza de Callao
		_places[3] = new Place("CALLAO", false,
				"In this small square you can find some some fuel. "
						+ LINE_SEPARATOR
						+ "Go to fnac and take the fuel for the heating");

		// 4: Plaza de Colón (END)
		_places[4] = new Place(
				"COLON",
				true,
				"Sometime ago, Spanish people concentrates here to watch football "
						+ LINE_SEPARATOR
						+ "in a big screen."
						+ LINE_SEPARATOR
						+ "Wall-e, did you know that in Spain there were very good football teams?."
						+ LINE_SEPARATOR
						+ "Look for cans! People throw cans after watching football!");

		// 5: Cibeles
		_places[5] = new Place("CIBELES", false,
				"Arggg, the fountain is ugly! The water is very dirty. "
						+ LINE_SEPARATOR
						+ "You should leave before the lions attack you");

		// 6: Neptuno
		_places[6] = new Place("NEPTUNO", false,
				"Watch Wall-e! Another fountain! Perhaps this one has water for drinking"
						+ LINE_SEPARATOR
						+ "If you are cold, use that red and white scarf");

		// 7: Atocha
		_places[7] = new Place("ATOCHA", false,
				"You have a lot of old trains here, but they do not work"
						+ LINE_SEPARATOR
						+ "All trains were destroyed during the crisis of 2013"
						+ LINE_SEPARATOR
						+ "Take all the iron you find");

		// 8: Puerta de Alcala
		_places[8] = new Place("PUERTA DE ALCALA", true,
				"Ok, finally you have found your spaceship....");

		// 9: Plaza de Jacinto Benavente
		_places[9] = new Place("JACINTO BENAVENTE", false,
				"If you are cold you can start a fire with the wheels of those old buses");

		return _places;
	}

	/**
	 * Creates the different streets between the places. It adds items to the
	 * places
	 * 
	 * @param _places
	 * @return An array of streets
	 */
	@SuppressWarnings("unused")
	private static Street[] createStreets(Place[] _places) {
		Street[] _streets = new Street[11];

		_streets[0] = new Street(_places[0], Direction.NORTH, _places[3],
				false, "red_pill");
		_streets[1] = new Street(_places[0], Direction.SOUTH, _places[9]);
		_streets[2] = new Street(_places[0], Direction.EAST, _places[5], false,
				"12345");
		_streets[3] = new Street(_places[0], Direction.WEST, _places[1]);

		_streets[4] = new Street(_places[1], Direction.NORTH, _places[2]);

		_streets[5] = new Street(_places[3], Direction.WEST, _places[2]);

		_streets[6] = new Street(_places[5], Direction.NORTH, _places[4],
				false, "Joshua");
		_streets[7] = new Street(_places[5], Direction.EAST, _places[8], false,
				"eva");
		_streets[8] = new Street(_places[5], Direction.SOUTH, _places[6]);

		_streets[9] = new Street(_places[6], Direction.SOUTH, _places[7]);
		_streets[10] = new Street(_places[9], Direction.EAST, _places[6]);

		_places[0].addItem(new Garbage("newspapers", "news on sports", 5));
		_places[0].addItem(new Fuel("grapes", "celebrations of the new year",
				1, 1));
		_places[0].addItem(new CodeCard(
						"Spaceballs-card",
						"This is the kind of combination an idiot would have on his luggage",
						"12345"));
		_places[0].addItem(new Fuel(
						"Coal",
						"Be careful with this fuel because it is extremely contaminant",
						-80, 1));

		_places[1].addItem(new Fuel("gas-oil", "from the buses..", 5, 2));
		_places[1].addItem(new Garbage("explosive-plastic",
				"too dangerous to be in the street", 10));
		_places[1].addItem(new CodeCard("matrix-card",
				"It shows you how deep the rabbit hole goes", "red_pill"));

		_places[3].addItem(new Garbage("cans-of-beer", "all of them are empty",
				2));
		_places[3].addItem(new Fuel("petrol", "from olds heatings", 10, 3));

		_places[4].addItem(new Fuel("battery", "to get cracking", 4, 1));
		_places[4].addItem(new Garbage("television",
				"it is broken. Better. Usually programs are really bad", 10));

		_places[5]
				.addItem(new Fuel("water", "to put out possible fires", 11, 3));
		_places[5].addItem(new Garbage("white-scarf", "good for winter", 2));
		_places[5].addItem(new CodeCard("walle-card",
				"I lost it when I was looking for garbage", "eva"));
		_places[5]
				.addItem(new CodeCard(
						"Spaceballs-card",
						"This is the kind of combination an idiot would have on his luggage",
						"12345"));

		_places[6].addItem(new Garbage("tinned-food",
				"it seems spanish people were hungry", 11));
		_places[6].addItem(new Garbage("yellow-press",
				"what stupid things they write", 1));

		_places[7].addItem(new Fuel("red-bull", "good for flying", 5, 1));
		_places[7].addItem(new CodeCard("falken-card", "Shall we play a game?",
				"Joshua"));

		return _streets;
	}

	/**
	 * Creates the city, the engine and finally starts the simulation
	 * 
	 * @param args
	 */

	
	public static void main(String[] args) {
        
        InputStream file;
        boolean console = false;
        boolean swing = false;
        String mapRoute = "";
        City city=null;
        CityLoaderFromTxtFile mapaArchivo = new CityLoaderFromTxtFile();
        //Create a parser
        CommandLineParser parser = new BasicParser( );
         
        // Add the options of the command line
        Options options = new Options();
	   
	    options.addOption("h", "help", false, "Shows this help message");
	    options.addOption("i", "interface", true, "The type of interface: console or swing" );
	    options.addOption("m", "map", true, "File with the description of the city");
	    
	    //Set the required of the options
	    
	    options.getOption("h").setRequired(false);
	    options.getOption("i").setRequired(true);
	    options.getOption("m").setRequired(true);
	    
	    //Analyse the args
	    
	    try{
	            
	    	CommandLine commandLine = parser.parse( options, args );
	            
	        if(commandLine.hasOption('h')){
	        	String cadena = "Execute this assignment with these parameters:\n" +
	        			"usage: tp.pr4.Main [-h] [-i <type>] [-m <mapfile>]\n" +
	        			" -h,--help               " + options.getOption("h").getDescription() +"\n"+
	                    " -i,--interface <type>   " + options.getOption("i").getDescription() +"\n"+
	                    " -m,--map <mapfile>      " + options.getOption("m").getDescription();
	            System.out.println(cadena);
	            
	            System.exit(0);     
	      
	            
	        }
	        
        	if (commandLine.hasOption('m')){
        		mapRoute=commandLine.getOptionValue("m");
               		 
	        }else{
	        	System.err.println("Map file not specified");
	         	System.exit(1);
	        }
        	 
            if(commandLine.hasOption('i')){
            	console = (commandLine.getOptionValue("i").contains("console"));
            	swing = (commandLine.getOptionValue("i").contains("swing"));
                if(!console&&!swing){
                	System.err.println("Wrong type of interface");//Ejec 6 y 7
                	System.exit(1);
                }
            }else{
                System.err.println("Interface not specified");
                System.exit(1);
          
	        }
	
	    }catch(ParseException ex){
	    	boolean errorInterface = true;
	    	for(int i=0; i<args.length; i++){
	    		if(args[i].contains("console") || args[i].contains("swing")){
	    			errorInterface=false;
	    		}
	    	}
	    	if(errorInterface){
	    		System.err.println("Wrong type of interface");
            	System.exit(1);
	    	}
	    	
	    }
	    
	    try {
			file = new FileInputStream(mapRoute);
			city = mapaArchivo.loadCity(file);
		} catch (FileNotFoundException e) {
			System.err.println("Error reading the map file: noExiste.txt (No existe el fichero o el directorio)");//Ejec10
            System.exit(2);
		}catch (IOException e) {
			System.err.println("Error reading the map file: noExiste.txt (No existe el fichero o el directorio)");//Ejec10
            System.exit(2);
		}
			
	   
	    
	    if (city != null ) {
	        RobotEngine robot = new RobotEngine(city, city.getPlace(0),Direction.NORTH);
	        if(console){
	        	robot.setConsola(true);
	            robot.startEngine();
	            System.exit(0);
	        }else if(swing){
	        	robot.setConsola(false);
	            Controlador elControlador = new Controlador(robot);
	    		MainWindow laVista = new MainWindow(elControlador);
	    		robot.setGUIWindow(laVista);
	    		laVista.update(robot, null);
	    		laVista.arranca();
	         }else{ 
	            System.err.println("Wrong type of interface");
	            System.exit(2);
	         }
	    }
	}

}
